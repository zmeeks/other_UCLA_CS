******************************
* CS 161 -- hw # 4 -- README *
******************************
* Zack M XXXXXX115*

This assignment solves the SAT-3 problem recursively using LISP.  Please see hw4.pdf for assignment specs.

I solved this project on paper before I coded it and missed an obvious optimization opportunity as well as an opportunity for a simpler solution:
My solution finds all solutions, if any exist, and prints an arbitrary solution.  Given the requirement of only needing to print an arbitrary solution, I could have the solution checker in the middle of the recursion instead of at the end.  
I left mine as is because the faster exit-early solution would require a significantly different structure and I found the solution-check at the end challenging and fun:
with the solution check at the end, the program recursively iterates through a list of lists of lists, while a solution in the middle would only entail a different recursion step in the middle so that most functions in current solution are passing around a list of lists of lists,
while the faster implementation would only be passing around a list of lists.  And both methods should solve the case of no solution in the same big-O time, but their implementations would be similarly different.